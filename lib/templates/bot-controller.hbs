<html>
    <head>
        <style>
            .mui-appbar.mui-appbar {
                background-color: #8BC34A;
            }
            .headline {
                text-align: center;
                padding: 22px;
            }
            .title.title {
                padding: 24px;
                font-weight: bold;
            }
            .mui-panel.mui-panel {
                display: flex;
                flex-flow: row wrap;
                justify-content: space-between;

            }
            .mui-btn.mui-btn {
                font-size: 20px;
                height: auto;
            }
            #isPlaying {
                text-transform: uppercase;
            }
            #statusBar > div {
                background-color: #455A64;
                color: white;
                border-radius: 2px;
                padding: 10px 14px;
                margin: 10px;
            }
            .toolbar {
                display: flex;
                flex-flow: column nowrap;
                align-items: center;
            }
            .toolbar-btn.toolbar-btn {
                height: 55px;
            }
            .toolbar-toggle.toolbar-toggle,
            .toolbar-toggle.toolbar-toggle:active,
            .toolbar-toggle.toolbar-toggle:focus {
                background-color: #9E9E9E;
            }
            .toolbar-toggle.toolbar-toggle:hover {
                opacity: 0.7;
            }
            .toolbar-toggle.toolbar-toggle .fa-mouse-pointer {
                padding-left: 4px;
            }
            .toolbar-toggle.toolbar-toggle.is-active,
            .toolbar-toggle.toolbar-toggle.is-active:focus {
                background-color: #2196F3;
            }
            .sending-clicks {
                cursor: pointer;
            }
        </style>
        <!-- load icon font -->
        <link href="//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
        <!-- load MUI -->
        <link href='//cdn.muicss.com/mui-0.9.43/css/mui.min.css' rel='stylesheet' type='text/css' />
        <script src='//cdn.muicss.com/mui-0.9.43/js/mui.min.js'></script>
    </head>

    <body>
        <div class='mui-appbar'>
            <div class='headline mui--text-headline'><strong>build-a-bot controller for bot '{{botId}}'</strong></div>
        </div>

        <div class='title mui--text-title' style='text-align: center;'>Connection: <span id='connection'>Good</span></div>

        <div id='mainContent'>
            <div id='statusBar' class='mui-panel'>
                <div class='mui--text-title'>Playing – <span id='isPlaying'>{{status.isPlaying}}</span></div>
                <div class='mui--text-title'>Step – <span id='currentStepStatus'>{{status.index}}</span></div>
                <div class='mui--text-title'>Direction – <span id='currentDirection'>{{status.direction}}</span></div>
            </div>

            <div class='mui-panel'>
                <button id='playPause' style='margin: 15px 0;' class='mui-btn mui-btn--primary'>Pause</button>
                <div style='display: flex;'>
                    <div class='mui-textfield'><input id='setStep' type='text' placeholder='Step' /></div>
                    <button id='setStepBtn' style='margin: 15px 0 15px 15px;' type='text' class='mui-btn mui-btn--raised'>Set step</button>
                </div>
            </div>

            <div class='mui-container'>
                <div id='mainPanel' class='mui-panel'>
                    <div id='leftToolbar' class='toolbar'>
                        <button id='refreshBtn' class="toolbar-btn mui-btn mui-btn--primary mui-btn--fab"><i class="fa fa-refresh"></i></button>
                        <button id='scrollUpBtn' class="toolbar-btn mui-btn mui-btn--primary mui-btn--fab"><i class="fa fa-arrow-up"></i></button>
                        <button id='scrollDownBtn' class="toolbar-btn mui-btn mui-btn--primary mui-btn--fab"><i class="fa fa-arrow-down"></i></button>
                    </div>
                    <img id='currentScreenshot' src={{screenshotPath}} />
                    <div id='rightToolbar' class='toolbar'>
                        <button id='clickToggle' class="toolbar-btn toolbar-toggle mui-btn mui-btn--primary mui-btn--fab"><i class="fa fa-mouse-pointer"></i></button>
                    </div>
                </div>
            </div>

            <pre>
                <div id='status' class='mui--text-body1'></div>
            </pre>
        </div>
    </body>

    <script>
        const statusEl = document.getElementById('status');
        const screenshotEl = document.getElementById('currentScreenshot');
        const currentStepStatusEl = document.getElementById('currentStepStatus');
        const currentDirectionEl = document.getElementById('currentDirection');
        const connectionEl = document.getElementById('connection');
        const isPlayingEl = document.getElementById('isPlaying');

        // Controls
        const playPauseEl = document.getElementById('playPause');
        const setStepEl = document.getElementById('setStep');
        const setStepBtnEl = document.getElementById('setStepBtn');

        // Toolbar
        const clickToggleEl = document.getElementById('clickToggle');
        const refreshBtnEl = document.getElementById('refreshBtn');
        const scrollUpBtnEl = document.getElementById('scrollUpBtn');
        const scrollDownBtnEl = document.getElementById('scrollDownBtn');

        const serverHost = '{{serverUrl}}';
        const botId = '{{botId}}';

        const status = { serverStatus: {}, toolbar: {} };

        const refreshScreenshot = () => {

            const src = screenshotEl.src.split('?')[0];
            screenshotEl.src = src + '?date=' + Date.now();
        };

        // Toolbar

        refreshBtnEl.onclick = () => {

            refreshScreenshot();
        };

        scrollUpBtnEl.onclick = async () => {

            await fetch(`${serverHost}/bots/${botId}/control`, {
                method: 'post',
                body: JSON.stringify({
                    scroll: { x: 0, y: -400 }
                })
            });
            refreshScreenshot();
        };

        scrollDownBtnEl.onclick = async () => {

            await fetch(`${serverHost}/bots/${botId}/control`, {
                method: 'post',
                body: JSON.stringify({
                    scroll: { x: 0, y: 400 }
                })
            });
            refreshScreenshot();
        };

        // Screenshot click listener

        screenshotEl.addEventListener('click', async (evt) => {

            if (status.toolbar.click) {

                const { x: elX, y: elY } = screenshotEl.getBoundingClientRect();

                await fetch(`${serverHost}/bots/${botId}/control`, {
                    method: 'post',
                    body: JSON.stringify({
                        click: { x: evt.clientX - elX, y: evt.clientY - elY }
                    })
                });

                setTimeout(() => {

                    refreshScreenshot();
                }, 100);
            }
        });

        playPauseEl.onclick = () => {

            fetch(`${serverHost}/bots/${botId}/control`, {
                method: 'post',
                body: JSON.stringify({
                    setting: 'isPlaying', val: !status.serverStatus.isPlaying
                })
            });
        };

        setStepBtnEl.onclick = () => {

            fetch(`${serverHost}/bots/${botId}/control`, {
                method: 'post',
                body: JSON.stringify({
                    setting: 'index', val: setStepEl.value
                })
            });
        };

        clickToggleEl.onclick = () => {

            status.toolbar.click = !status.toolbar.click;

            if (status.toolbar.click) {
                clickToggleEl.classList.add('is-active');
                screenshotEl.classList.add('sending-clicks');
            }
            else {
                clickToggleEl.classList.remove('is-active');
                screenshotEl.classList.remove('sending-clicks');
            }

            clickToggleEl.blur();
        };

        // SSE stuff
        const onOpen = () => console.log('SSE connection opened.');
        const onClose = () => {

            connectionEl.innerHTML = 'Disconnected';
            console.log('SSE connection closed.')
        };

        const es = new EventSource('{{ssePath}}');

        const statusHandler = (msg) => {

            if (msg.data === 'open') {
                return;
            }

            const parsedStatus = JSON.parse(msg.data);

            status.serverStatus = parsedStatus;

            // Status
            currentStepStatusEl.innerHTML = status.serverStatus.index;
            isPlayingEl.innerHTML = status.serverStatus.isPlaying;
            currentDirectionEl.innerHTML = status.serverStatus.direction === 'forward' ? 'Fwd' : 'Backward';

            // Controls
            playPauseEl.innerHTML = status.serverStatus.isPlaying ? 'Pause' : 'Play';

            // For debug, but it's annoying
            // statusEl.innerHTML = JSON.stringify(parsedStatus, null, 4);

            if (parsedStatus.isPlaying) {
                setTimeout(() => {

                    const src = screenshotEl.src.split('?')[0];
                    screenshotEl.src = src + '?date=' + Date.now();
                }, 1000);
            }
        };

        es.addEventListener('status', statusHandler);

        const endFunc = () => {

            onClose();
            es.close();
            es.removeEventListener('status', statusHandler);
            es.removeEventListener('end', endFunc);
            es.removeEventListener('open', onOpen);
            es.removeEventListener('error', onError);

            // Disable interaction with a bot when disconnected
            mainContent.style.opacity = 0.3;
            mainContent.style.pointerEvents = 'none';
        };

        const onError = (err) => {

            console.error('SSE Error:\n', err);
            endFunc();
        };

        es.addEventListener('error', onError);
        es.addEventListener('end', endFunc);
    </script>
</html>
